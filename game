def game(grid):
    end   = (len(grid) - 1, len(grid[0]) - 1)
    guard = {'<':(0, -1), '>':(0, 1), 'v':(1, 0), '^':(-1, 0)}
    d     = {}
    
    for i in range(len(grid)):
        for j in range(len(grid[0])):
            if grid[i][j] != 'X':
                d[(i, j)] = grid[i][j]
                
            if grid[i][j] == 'A':
                beg = (i, j)
                
    if beg == end:
        return True
                    
    for i, j in list(d):
        if (i, j) in d and d[(i, j)] in guard:
            x, y = guard[d[(i, j)]]

            while True:
                if (i, j) in (beg, end):
                    return False

                i += x
                j += y

                if (i, j) not in d or d[(i, j)] != '.':
                    break

                d.pop((i, j))
                    
    return bfs(d, beg, end)
    
#-------------------------------------------------------------------------------------

def bfs(d, beg, end):
    q   = [beg]
    vis = set()
    
    while q:
        i, j = q.pop(0)
        
        if (i, j) == end:
            return True
        
        vis.add((i, j))   

        for x, y in [(0, 1), (1, 0), (0, -1), (-1, 0)]:
            x += i
            y += j

            if (x, y) in d and (x, y) not in vis:
                q.append((x, y))
                
    return False
    
#-------------------------------------------------------------------------------------

def main():
    grid = [['A', '.', '.', '>', '.'],
            ['.', '.', '<', '.', '.'],
            ['.', '.', '.', '.', '^'],
            ['.', 'X', 'X', '.', '.'],
            ['.', '.', '.', '^', '.'],
            ['.', '<', 'X', 'X', '.'],
           ]
    
    if game(grid):
        print('YES')
    else:
        print('NO')
    
#-------------------------------------------------------------------------------------

main()
