#-------------------------------------------------------------------------------------
# Assassin A's goal is to reach lower right corner undetected. Obstacles are trees and
# guards who can only see in the direction they point.
#-------------------------------------------------------------------------------------

def game(grid):
    end   = (len(grid) - 1, len(grid[0]) - 1)
    guard = {'<':(0, -1), '>':(0, 1), 'v':(1, 0), '^':(-1, 0)}
    d     = {}
    
    for i in range(len(grid)):
        for j in range(len(grid[0])):
            if grid[i][j] != 'X':
                d[(i, j)] = grid[i][j]
                
            if grid[i][j] == 'A':
                beg = (i, j)
                
    for i, j in list(d):
        if (i, j) in d and d[(i, j)] in guard:
            x, y = guard[d[(i, j)]]

            while True:
                i += x
                j += y

                if (i, j) not in d or d[(i, j)] not in ('A', '.'):
                    break

                d.pop((i, j))
                    
    if beg not in d or end not in d:
        return []
    else:
        return bfs(d, beg, end)
    
#-------------------------------------------------------------------------------------

def bfs(d, beg, end):
    q   = [(beg, [beg])]
    vis = {beg}
    
    while q:
        pos, path = q.pop(0)
        
        if pos == end:
            return path
        
        for x, y in [(0, 1), (1, 0), (0, -1), (-1, 0)]:
            x += pos[0]
            y += pos[1]

            if (x, y) in d and (x, y) not in vis:
                q.append(((x, y), path + [(x, y)]))
                vis.add((x, y))   
             
    return []
    
#-------------------------------------------------------------------------------------

def main():
    grid = [['A', '.', '.', '>', '.'],
            ['.', '.', '<', 'X', '.'],
            ['.', '.', '.', '.', '^'],
            ['.', 'X', 'X', '>', '.'],
            ['.', '.', '.', '<', '.'],
            ['.', '<', 'X', 'X', '.'],
           ]
    
    path = game(grid)
    print(path)
    
#-------------------------------------------------------------------------------------

main()
                        
